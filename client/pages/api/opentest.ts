import {NextApiRequest, NextApiResponse} from 'next';
import {createPublicClient, hashMessage, http, verifyMessage} from 'viem';
import {hardhat} from 'viem/chains';
import {HeroicusAddress} from '../../utils/addresses';
import {heroicusABI} from '../../generated';
import {Address} from 'wagmi';

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'POST') {
    res.status(401).end();
  }
  const {token, s} = JSON.parse(req.body);
  const tokenId = Number(token);
  const hash = hashMessage(token as string);

  const client = createPublicClient({
    chain: hardhat,
    transport: http(),
  });

  const userInfo = await client.readContract({
    address: HeroicusAddress,
    abi: heroicusABI,
    functionName: 'userInfo',
    args: [BigInt(tokenId)]
  });
  const expired = userInfo[1];
  const userStruct = userInfo[0] as { user: Address };

  const signatureValid = await verifyMessage({
    address: userStruct.user,
    message: 'Sign in with ID: ' + hash,
    signature: s
  });
  if (!signatureValid) {
    res.status(401).json({error: 'Not owner of NFT'});
    return;
  }

  if (expired) {
    res.status(401).json({error: 'Expired rental'});
    return;
  }

  res.json({
    ip: `http://www.johndee.com`
  });
};

export default handler;
